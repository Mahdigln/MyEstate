// <auto-generated />
using System;
using DataLayer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataLayer.Migrations
{
    [DbContext(typeof(MyEstateContext))]
    [Migration("20230828162505_Add_TitleToEstate")]
    partial class Add_TitleToEstate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataLayer.Entities.Estate.Estate", b =>
                {
                    b.Property<int>("EstateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstateId"), 1L, 1);

                    b.Property<int>("BuildingArea")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DemoFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstateTitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("NumberOfRoom")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("TotalArea")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EstateId");

                    b.HasIndex("UserId");

                    b.ToTable("Estates");
                });

            modelBuilder.Entity("DataLayer.Entities.Estate.EstateFeature", b =>
                {
                    b.Property<int>("EstateFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstateFeatureId"), 1L, 1);

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<string>("FeatureTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstateFeatureId");

                    b.HasIndex("EstateId");

                    b.ToTable("EstateFeatures");
                });

            modelBuilder.Entity("DataLayer.Entities.Estate.EstateImage", b =>
                {
                    b.Property<int>("EstateImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstateImageId"), 1L, 1);

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<string>("EstateImageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstateImageId");

                    b.HasIndex("EstateId");

                    b.ToTable("EstateImages");
                });

            modelBuilder.Entity("DataLayer.Entities.Estate.EstateType", b =>
                {
                    b.Property<int>("EstateTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EstateTypeId"), 1L, 1);

                    b.Property<int>("EstateId")
                        .HasColumnType("int");

                    b.Property<string>("EstateTypeTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EstateTypeId");

                    b.HasIndex("EstateId");

                    b.ToTable("EstateTypes");
                });

            modelBuilder.Entity("DataLayer.Entities.User.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<string>("Career")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InstagramId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProfileImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataLayer.Entities.Estate.Estate", b =>
                {
                    b.HasOne("DataLayer.Entities.User.User", "User")
                        .WithMany("Estates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Entities.Estate.EstateFeature", b =>
                {
                    b.HasOne("DataLayer.Entities.Estate.Estate", "Estate")
                        .WithMany("EstateFeatures")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estate");
                });

            modelBuilder.Entity("DataLayer.Entities.Estate.EstateImage", b =>
                {
                    b.HasOne("DataLayer.Entities.Estate.Estate", "Estate")
                        .WithMany("EstateImages")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estate");
                });

            modelBuilder.Entity("DataLayer.Entities.Estate.EstateType", b =>
                {
                    b.HasOne("DataLayer.Entities.Estate.Estate", "Estate")
                        .WithMany("EstateTypes")
                        .HasForeignKey("EstateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estate");
                });

            modelBuilder.Entity("DataLayer.Entities.Estate.Estate", b =>
                {
                    b.Navigation("EstateFeatures");

                    b.Navigation("EstateImages");

                    b.Navigation("EstateTypes");
                });

            modelBuilder.Entity("DataLayer.Entities.User.User", b =>
                {
                    b.Navigation("Estates");
                });
#pragma warning restore 612, 618
        }
    }
}
